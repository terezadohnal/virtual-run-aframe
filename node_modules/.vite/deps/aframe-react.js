import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __commonJS
} from "./chunk-V4OQ3NZ2.js";

// node_modules/aframe-react/dist/index.js
var require_dist = __commonJS({
  "node_modules/aframe-react/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Scene = exports.Entity = exports.options = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var nonEntityPropNames = ["children", "events", "primitive"];
    var filterNonEntityPropNames = function filterNonEntityPropNames2(propName) {
      return nonEntityPropNames.indexOf(propName) === -1;
    };
    var options = {
      // React needs this because React serializes.
      // Preact does not because Preact runs `.setAttribute` on its own.
      runSetAttributeOnUpdates: true
    };
    exports.options = options;
    function doSetAttribute(el, props, propName) {
      if (propName === "className") {
        el.setAttribute("class", props.className);
      } else if (props[propName] && props[propName].constructor === Function) {
        return;
      } else {
        el.setAttribute(propName, props[propName]);
      }
    }
    function updateAttributes(el, prevProps, props) {
      var propName;
      if (!props || prevProps === props) {
        return;
      }
      for (propName in props) {
        if (!filterNonEntityPropNames(propName)) {
          continue;
        }
        doSetAttribute(el, props, propName);
      }
      if (prevProps) {
        for (propName in prevProps) {
          if (!filterNonEntityPropNames(propName)) {
            continue;
          }
          if (props[propName] === void 0) {
            el.removeAttribute(propName);
          }
        }
      }
    }
    var Entity = exports.Entity = function(_React$Component) {
      _inherits(Entity2, _React$Component);
      function Entity2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Entity2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Entity2.__proto__ || Object.getPrototypeOf(Entity2)).call.apply(_ref, [this].concat(args))), _this), _this.initEntity = function(el) {
          var props = _this.props;
          var eventName;
          if (!el) {
            return;
          }
          _this.el = el;
          if (props.events) {
            for (eventName in props.events) {
              addEventListeners(el, eventName, props.events[eventName]);
            }
          }
          updateAttributes(el, null, props);
          if (props._ref) {
            props._ref(el);
          }
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Entity2, [{
        key: "componentDidUpdate",
        /**
         * Handle updates after the initial render.
         */
        value: function componentDidUpdate(prevProps, prevState) {
          var el = this.el;
          var props = this.props;
          updateEventListeners(el, prevProps.events, props.events);
          if (options.runSetAttributeOnUpdates) {
            updateAttributes(el, prevProps, props);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          var el = this.el;
          var props = this.props;
          var eventName;
          if (props.events) {
            for (eventName in props.events) {
              removeEventListeners(el, eventName, props.events[eventName]);
            }
          }
        }
        /**
         * Render A-Frame DOM with ref: https://facebook.github.io/react/docs/refs-and-the-dom.html
         */
      }, {
        key: "render",
        value: function render() {
          var props = this.props;
          var elementName = this.isScene ? "a-scene" : props.primitive || "a-entity";
          var propName;
          var reactProps = {};
          for (propName in props) {
            if (["className", "id", "mixin"].indexOf(propName) !== -1 || propName.indexOf("data-") === 0) {
              reactProps[propName] = props[propName];
            }
          }
          return _react2.default.createElement(elementName, _extends({ ref: this.initEntity }, reactProps), props.children);
        }
      }]);
      return Entity2;
    }(_react2.default.Component);
    var Scene = exports.Scene = function(_Entity) {
      _inherits(Scene2, _Entity);
      function Scene2(props) {
        _classCallCheck(this, Scene2);
        var _this2 = _possibleConstructorReturn(this, (Scene2.__proto__ || Object.getPrototypeOf(Scene2)).call(this, props));
        _this2.isScene = true;
        return _this2;
      }
      return Scene2;
    }(Entity);
    function updateEventListeners(el, prevEvents, events) {
      var eventName;
      if (!prevEvents || !events || prevEvents === events) {
        return;
      }
      for (eventName in events) {
        if (prevEvents[eventName] === events[eventName]) {
          continue;
        }
        if (prevEvents[eventName]) {
          removeEventListeners(el, eventName, prevEvents[eventName]);
        }
        addEventListeners(el, eventName, events[eventName]);
      }
      for (eventName in prevEvents) {
        if (!events[eventName]) {
          removeEventListeners(el, eventName, prevEvents[eventName]);
        }
      }
    }
    function addEventListeners(el, eventName, handlers) {
      var handler;
      var i;
      if (!handlers) {
        return;
      }
      if (handlers.constructor === Function) {
        handlers = [handlers];
      }
      for (i = 0; i < handlers.length; i++) {
        el.addEventListener(eventName, handlers[i]);
      }
    }
    function removeEventListeners(el, eventName, handlers) {
      var handler;
      var i;
      if (!handlers) {
        return;
      }
      if (handlers.constructor === Function) {
        handlers = [handlers];
      }
      for (i = 0; i < handlers.length; i++) {
        el.removeEventListener(eventName, handlers[i]);
      }
    }
  }
});
export default require_dist();
//# sourceMappingURL=aframe-react.js.map
