{"version":3,"file":"aframe-extras.misc.min.js","mappings":"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","sources":["webpack://aframe-extras/webpack/universalModuleDefinition","webpack://aframe-extras/./src/misc/checkpoint.js","webpack://aframe-extras/./src/misc/cube-env-map.js","webpack://aframe-extras/./src/misc/grab.js","webpack://aframe-extras/./src/misc/normal-material.js","webpack://aframe-extras/./src/misc/sphere-collider.js","webpack://aframe-extras/webpack/bootstrap","webpack://aframe-extras/./src/misc/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","module.exports = AFRAME.registerComponent('checkpoint', {\n  schema: {\n    offset: {default: {x: 0, y: 0, z: 0}, type: 'vec3'}\n  },\n\n  init: function () {\n    this.active = false;\n    this.targetEl = null;\n    this.fire = this.fire.bind(this);\n    this.offset = new THREE.Vector3();\n  },\n\n  update: function () {\n    this.offset.copy(this.data.offset);\n  },\n\n  play: function () { this.el.addEventListener('click', this.fire); },\n  pause: function () { this.el.removeEventListener('click', this.fire); },\n  remove: function () { this.pause(); },\n\n  fire: function () {\n    const targetEl = this.el.sceneEl.querySelector('[checkpoint-controls]');\n    if (!targetEl) {\n      throw new Error('No `checkpoint-controls` component found.');\n    }\n    targetEl.components['checkpoint-controls'].setCheckpoint(this.el);\n  },\n\n  getOffset: function () {\n    return this.offset.copy(this.data.offset);\n  }\n});\n","/**\n * @param  {Array<THREE.Material>|THREE.Material} material\n * @return {Array<THREE.Material>}\n */\nfunction ensureMaterialArray (material) {\n  if (!material) {\n    return [];\n  } else if (Array.isArray(material)) {\n    return material;\n  } else if (material.materials) {\n    return material.materials;\n  } else {\n    return [material];\n  }\n}\n\n/**\n * @param  {THREE.Object3D} mesh\n * @param  {Array<string>} materialNames\n * @param  {THREE.Texture} envMap\n * @param  {number} reflectivity  [description]\n */\nfunction applyEnvMap (mesh, materialNames, envMap, reflectivity) {\n  if (!mesh) return;\n\n  materialNames = materialNames || [];\n\n  mesh.traverse((node) => {\n\n    if (!node.isMesh) return;\n\n    const meshMaterials = ensureMaterialArray(node.material);\n\n    meshMaterials.forEach((material) => {\n\n      if (material && !('envMap' in material)) return;\n      if (materialNames.length && materialNames.indexOf(material.name) === -1) return;\n\n      material.envMap = envMap;\n      material.reflectivity = reflectivity;\n      material.needsUpdate = true;\n\n    });\n\n  });\n}\n\n/**\n * Specifies an envMap on an entity, without replacing any existing material\n * properties.\n */\nmodule.exports = AFRAME.registerComponent('cube-env-map', {\n  multiple: true,\n\n  schema: {\n    path: {default: ''},\n    extension: {default: 'jpg', oneOf: ['jpg', 'png']},\n    enableBackground: {default: false},\n    reflectivity: {default: 1, min: 0, max: 1},\n    materials: {default: []}\n  },\n\n  init: function () {\n    const data = this.data;\n\n    this.texture = new THREE.CubeTextureLoader().load([\n      data.path + 'posx.' + data.extension, data.path + 'negx.' + data.extension,\n      data.path + 'posy.' + data.extension, data.path + 'negy.' + data.extension,\n      data.path + 'posz.' + data.extension, data.path + 'negz.' + data.extension\n    ]);\n    this.texture.format = THREE.RGBAFormat;\n\n    this.object3dsetHandler = () => {\n      const mesh = this.el.getObject3D('mesh');\n      const data = this.data;\n      applyEnvMap(mesh, data.materials, this.texture, data.reflectivity);\n    };\n\n    this.object3dsetHandler();\n    this.el.addEventListener('object3dset', this.object3dsetHandler);\n    \n  },\n\n  update: function (oldData) {\n    const data = this.data;\n    const mesh = this.el.getObject3D('mesh');\n\n    let addedMaterialNames = [];\n    let removedMaterialNames = [];\n\n    if (data.materials.length) {\n      if (oldData.materials) {\n        addedMaterialNames = data.materials.filter((name) => !oldData.materials.includes(name));\n        removedMaterialNames = oldData.materials.filter((name) => !data.materials.includes(name));\n      } else {\n        addedMaterialNames = data.materials;\n      }\n    }\n    if (addedMaterialNames.length) {\n      applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity);\n    }\n    if (removedMaterialNames.length) {\n      applyEnvMap(mesh, removedMaterialNames, null, 1);\n    }\n\n    if (oldData.materials && data.reflectivity !== oldData.reflectivity) {\n      const maintainedMaterialNames = data.materials\n        .filter((name) => oldData.materials.includes(name));\n      if (maintainedMaterialNames.length) {\n        applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity);\n      }\n    }\n\n    if (this.data.enableBackground && !oldData.enableBackground) {\n      this.setBackground(this.texture);\n    } else if (!this.data.enableBackground && oldData.enableBackground) {\n      this.setBackground(null);\n    }\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.object3dsetHandler);\n    const mesh = this.el.getObject3D('mesh');\n    const data = this.data;\n\n    applyEnvMap(mesh, data.materials, null, 1);\n    if (data.enableBackground) this.setBackground(null);\n  },\n\n  setBackground: function (texture) {\n    this.el.sceneEl.object3D.background = texture;\n  }\n});","/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n\n    this.GRABBED_STATE = 'grabbed';\n\n    this.grabbing = false;\n    this.hitEl =      /** @type {AFRAME.Element}    */ null;\n    this.physics =    /** @type {AFRAME.System}     */ this.el.sceneEl.systems.physics;\n    this.constraint = /** @type {CANNON.Constraint} */ null;\n\n    // Bind event handlers\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n    if (!hitEl) { return; }\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n\n  onHit: function (evt) {\n    const hitEl = evt.detail.el;\n    // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n    if (hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) { return; }\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});\n","/**\n * Recursively applies a MeshNormalMaterial to the entity, such that\n * face colors are determined by their orientation. Helpful for\n * debugging geometry\n */\nmodule.exports = AFRAME.registerComponent('normal-material', {\n  init: function () {\n    this.material = new THREE.MeshNormalMaterial({flatShading: true});\n    this.applyMaterial = this.applyMaterial.bind(this);\n    this.el.addEventListener('object3dset', this.applyMaterial);\n    this.applyMaterial();\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.applyMaterial);\n  },\n\n  applyMaterial: function () {\n    this.el.object3D.traverse((node) => {\n      if (node.isMesh) node.material = this.material;\n    });\n  }\n});\n","/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Implement bounding sphere collision detection for entities with a mesh.\n * Sets the specified state on the intersected entities.\n *\n * @property {string} objects - Selector of the entities to test for collision.\n * @property {string} state - State to set on collided entities.\n *\n */\nmodule.exports = AFRAME.registerComponent('sphere-collider', {\n  schema: {\n    enabled: {default: true},\n    interval: {default: 80},\n    objects: {default: ''},\n    state: {default: 'collided'},\n    radius: {default: 0.05},\n    watch: {default: true}\n  },\n\n  init: function () {\n    /** @type {MutationObserver} */\n    this.observer = null;\n    /** @type {Array<Element>} Elements to watch for collisions. */\n    this.els = [];\n    /** @type {Array<Element>} Elements currently in collision state. */\n    this.collisions = [];\n    this.prevCheckTime = undefined;\n\n    this.eventDetail = {};\n    this.handleHit = this.handleHit.bind(this);\n    this.handleHitEnd = this.handleHitEnd.bind(this);\n  },\n\n  play: function () {\n    const sceneEl = this.el.sceneEl;\n\n    if (this.data.watch) {\n      this.observer = new MutationObserver(this.update.bind(this, null));\n      this.observer.observe(sceneEl, {childList: true, subtree: true});\n    }\n  },\n\n  pause: function () {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  },\n\n  /**\n   * Update list of entities to test for collision.\n   */\n  update: function () {\n    const data = this.data;\n    let objectEls;\n\n    // Push entities into list of els to intersect.\n    if (data.objects) {\n      objectEls = this.el.sceneEl.querySelectorAll(data.objects);\n    } else {\n      // If objects not defined, intersect with everything.\n      objectEls = this.el.sceneEl.children;\n    }\n    // Convert from NodeList to Array\n    this.els = Array.prototype.slice.call(objectEls);\n  },\n\n  tick: (function () {\n    const position = new THREE.Vector3(),\n        meshPosition = new THREE.Vector3(),\n        colliderScale = new THREE.Vector3(),\n        size = new THREE.Vector3(),\n        box = new THREE.Box3(),\n        collisions = [],\n        distanceMap = new Map();\n    return function (time) {\n      if (!this.data.enabled) { return; }\n\n      // Only check for intersection if interval time has passed.\n      const prevCheckTime = this.prevCheckTime;\n      if (prevCheckTime && (time - prevCheckTime < this.data.interval)) { return; }\n      // Update check time.\n      this.prevCheckTime = time;\n\n      const el = this.el,\n          data = this.data,\n          mesh = el.getObject3D('mesh');\n      let colliderRadius;\n\n      if (!mesh) { return; }\n\n      collisions.length = 0;\n      distanceMap.clear();\n      el.object3D.getWorldPosition(position);\n      el.object3D.getWorldScale(colliderScale);\n      colliderRadius = data.radius * scaleFactor(colliderScale);\n      // Update collision list.\n      this.els.forEach(intersect);\n\n      // Emit events and add collision states, in order of distance.\n      collisions\n        .sort((a, b) => distanceMap.get(a) > distanceMap.get(b) ? 1 : -1)\n        .forEach(this.handleHit);\n\n      // Remove collision state from other elements.\n      this.collisions\n        .filter((el) => !distanceMap.has(el))\n        .forEach(this.handleHitEnd);\n\n      // Store new collisions\n      copyArray(this.collisions, collisions);\n\n      // Bounding sphere collision detection\n      function intersect (el) {\n        let radius, mesh, distance, extent;\n\n        if (!el.isEntity) { return; }\n\n        mesh = el.getObject3D('mesh');\n\n        if (!mesh) { return; }\n\n        box.setFromObject(mesh).getSize(size);\n        extent = Math.max(size.x, size.y, size.z) / 2;\n        radius = Math.sqrt(2 * extent * extent);\n        box.getCenter(meshPosition);\n\n        if (!radius) { return; }\n\n        distance = position.distanceTo(meshPosition);\n        if (distance < radius + colliderRadius) {\n          collisions.push(el);\n          distanceMap.set(el, distance);\n        }\n      }\n      // use max of scale factors to maintain bounding sphere collision\n      function scaleFactor (scaleVec) {\n        return Math.max(scaleVec.x, scaleVec.y, scaleVec.z);\n      }\n    };\n  })(),\n\n  handleHit: function (targetEl) {\n    targetEl.emit('hit');\n    targetEl.addState(this.data.state);\n    this.eventDetail.el = targetEl;\n    this.el.emit('hit', this.eventDetail);\n  },\n  handleHitEnd: function (targetEl) {\n    targetEl.emit('hitend');\n    targetEl.removeState(this.data.state);\n    this.eventDetail.el = targetEl;\n    this.el.emit('hitend', this.eventDetail);\n  }\n});\n\nfunction copyArray (dest, source) {\n  dest.length = 0;\n  for (let i = 0; i < source.length; i++) { dest[i] = source[i]; }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('./checkpoint');\nrequire('./cube-env-map');\nrequire('./grab');\nrequire('./normal-material');\nrequire('./sphere-collider');\n"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","registerComponent","schema","offset","default","x","y","z","type","init","this","active","targetEl","fire","bind","THREE","Vector3","update","copy","data","play","el","addEventListener","pause","removeEventListener","remove","sceneEl","querySelector","Error","components","setCheckpoint","getOffset","applyEnvMap","mesh","materialNames","envMap","reflectivity","traverse","node","material","isMesh","Array","isArray","materials","forEach","length","indexOf","name","needsUpdate","multiple","path","extension","oneOf","enableBackground","min","max","texture","CubeTextureLoader","load","format","RGBAFormat","object3dsetHandler","getObject3D","oldData","addedMaterialNames","removedMaterialNames","filter","includes","maintainedMaterialNames","setBackground","object3D","background","system","systems","physics","GRABBED_STATE","grabbing","hitEl","constraint","onHit","onGripOpen","onGripClose","removeState","undefined","removeConstraint","evt","detail","is","addState","CANNON","LockConstraint","body","addConstraint","MeshNormalMaterial","flatShading","applyMaterial","enabled","interval","objects","state","radius","watch","observer","els","collisions","prevCheckTime","eventDetail","handleHit","handleHitEnd","MutationObserver","observe","childList","subtree","disconnect","objectEls","querySelectorAll","children","prototype","slice","call","tick","position","meshPosition","colliderScale","size","box","Box3","distanceMap","Map","time","colliderRadius","scaleVec","clear","getWorldPosition","getWorldScale","Math","distance","extent","isEntity","setFromObject","getSize","sqrt","getCenter","distanceTo","push","set","sort","b","get","has","dest","source","copyArray","emit","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}